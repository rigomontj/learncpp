https://www.learncpp.com/cpp-tutorial/introduction-to-these-tutorials/

Lesson 0.1
----------

Knowing how NOT to program in C++ in as equally important as knowing how to.

Have fun !

Type in the examples by hand.

Solve your own programs before asking for help, learn how to find errors, fix them, and debug.

Experiment with the examples, change things, move it around, see what happens. Add functionalities,
find ways to break the program with your inputs, you will learn more by modifying the examples than
copying them.

Spend time with the quizzes. Try different approaches, make sure you understand before moving on.

Write your own short programs using the concepts you have learned for better retention.

GPT Summary: 
Active Learning: Type examples by hand, experiment with code, and modify it to understand how changes affect the program.
Self-Sufficiency: Solve problems independently before seeking help. Learn how to debug and fix your own errors.
Quizzes and Practice: Engage with quizzes to reinforce learning, try different approaches, and make sure you fully understand concepts before progressing.
Retention Through Practice: Write your own small programs to apply learned concepts and strengthen memory retention.


Lesson 0.2
----------

Computers are FAST but they understand only a limited set of instructions.

Programs are physically executed on the computer's hardware.

Interactive devices allow you to interact with the computer.
Storage devices store information even when it's turned off.
Memory, where computer programs are loaded prior to execution.
CPU, Central Processing Unit which actually executes the instructions.

In modern computing, programs don't just interact with the hardware,
they also interact with the computer's other software, especially its operating system.

The term platform refers to a compatible set of hardware and software that make up and environment
for applications to run.
For example, PC means a Windows OS (software) running on an x86-family CPU (hardware).

A computer's CPU is incapable of understanding C++.
CPUs can only process instructions in machine language (or machine code).
The set of all possible machine language instructions that a given CPU can understand is called an instruction set.
sample machine language instruction 10110000 01100001

First,
Each instruction is composed of a sequence of 1s and 0s. each invidual 0 or 1 is called a binary digit, or bit for short.
The number of bits in a machine language instruction varies with CPUs, some are always 32 bits long, x86 families
may have variable length.

Second,
Each family of CPUs (x86, Arm64...) has its own machine language, and all of them are not compatible.
A CPU family is also known as an instruction set architecture.

Because machine language is so hard for humans to read and understand, assembly language was invented.
In assembly, each instruction is a short abbreviation rather than a set of bits, and names and other numbers can be used.

Here is the same instruction as the sample machine language, this time in assembly language.
mov al, 061h
mov is an assembly command that copies a value into some location. In this case, the value 061h will be copied into the "al" CPU register
(memory that is part of the CPU itself)

Assembly is much easier to read and write, programs written in it tend be very fast and it's still used today
when speed is critical or in severely resource-constrained environments.

But CPUs ONLY speak machine language, so we must translate assembler into it using an assembler which outputs a program that can be run.

Assembly (and machine language downsides):
Hard to understand, individual instructions are understandable but it's hard to deduce what each part does.
Long, it requires many instructions to do something simple so they tend to be long.
Not portable, since each CPU family has its own machine AND assembly language.

To conteract those downsides, they made new programming languages, like C++.
They are called high level languages.
Here's the same instruction in C/C++:
a = 97;

But like assembly programs, they must be translated into ML to be run.
This can be done by COMPILING and INTERPRETING.

C++ programs are usually compiled.
A compiler is a program or collection of programs that take source code in a language as input
and translate it into another language
These low level language files outputs are then typically combined into an executable file
that can be run. Running it does not require the compiler to be installed.

Back then, compilers translated source code into unoptimized assembly or machine code.
Now, it can sometimes even be more optimized than human written programs directly in assembly.

High level source code -> compiled by -> compiler -> produces -> executable
Executable -> run on -> hardware -> produces -> program results

Alternatively, interpreters execute the instructions without needing to compile it into an executable.
They are usually more flexible, but less efficient since interpreting needs to be done every time we run it.
You also need the interpreter installed on every machine it will run on.

High level code -> interpreted by -> interpreter -> run on -> hardware -> produces -> program results.

Compilers are translated before executing, so they take a little bit of time upfront but run faster than interpreters.
Compilers usually use less memory because they see the whole code and can optimize it.
Interpreters usually start up faster.
Interpreters have more dynamic optimizations possibilities.
Compilers hide the source code behind the binary.

Most languages can be either compiled or interpreted. Usually high level languages like C++
are compiled, and scripting languages are interpreted.
Some like Java use a mix.

High level languages are much easier to read and write because they're closer to english. It's also easier to learn.
They use fewer instructions to perform the same tasks as lower level languages. a = b * 2 + 5; (in C)  would take 4 to 6 different
instructions in assembly.
High level is more portable because it can be compiled differently for many different platforms.
A cross-platform program is designed to run on more than one platform.

List of things that can reduce portability of your C++ source code:
Many OS like Windows offer platform-specific capabilities to use in your code. It can make some programs
way easier to write for some OS or have deeper integration with that OS that wouldn't be possible otherwise.
Many 3rd party libraries are only available on certain platforms. Use that library and you're limited to its supported platforms.
If you use compiler specific extensions in your code, you're limited to those compilers that support it.
In some cases, C++ allows the compiler to determine how something should behave. So there can be differences between compilers
hence portability issues.

In those lessons, we will avoid platform specific code as much as possible, to keep portability in mind.

BLUE: Rules are instructions that you must do, as required by the language. Failure to abide by those rules will
result in your program not working.

GREEN: Best practice are things that you should do because it's extremely conventional (idiomatic) or recommended.
It's either so common that doing it another way would be unexpected or it's just generally superior to the alternatives.

RED: Warnings are things that you should not do because they will lead to unexpected results.

GPT Summary:
    Basic Computer Components:
        Computers are fast but understand only a limited set of instructions.
        Programs execute on the computer's hardware.
        The CPU (Central Processing Unit) processes instructions, but it can only understand machine language (binary code).

    Machine Language and Assembly:
        Machine language consists of binary instructions specific to each CPU family (e.g., x86, ARM).
        Assembly language is a human-readable version of machine language, using abbreviations for instructions. Though easier to read than binary, it's still challenging, long, and not portable.

    High-Level Programming Languages:
        High-level languages (like C++) are easier to use than assembly and machine languages. They are closer to human languages and perform more complex tasks with fewer instructions.
        High-level languages must be translated into machine language, typically using compilers or interpreters.
            Compilers translate the entire program at once, producing an executable file. This process is faster when running the program but requires more upfront time.
            Interpreters execute code directly without producing an executable. They are more flexible but slower since the code is interpreted line by line.

    Portability:
        High-level languages are more portable because they can be compiled for different platforms. However, platform-specific code, third-party libraries, and compiler-specific extensions can reduce portability.

    Coding Best Practices:
        Rules (Blue): Mandatory instructions that must be followed for the program to work.
        Best Practices (Green): Recommended conventions that improve readability and efficiency.
        Warnings (Red): Practices to avoid as they lead to errors or unexpected behavior.

In summary, the lesson outlines how computers execute programs through machine language and how higher-level languages, like C++, improve usability and portability by abstracting the complexity of machine instructions.

Lesson 0.3
----------

C was developed in 1972 by Dennis Ritchie at Bell Telephone laboratories as a systems programming language (language used to write operating systems)
Its goals were to produce a minimalistic language that was easy to compile, allowed efficient access to memory, produced efficient code,
and was self contained (not realiant on other programs). For a high-level language, it was designed to give the programmer a lot of control
while still retaining portability.

It ended up being so efficient and flexible that in 1973, they rewrote most of the Unix OS in C. Before, OS used to be written in assembly
C provided better portability, and Unix's success promptly got followed by C's success.

In 1978, Dennis Ritchie and Brian Kernighan published a book with informal specifications for C and became a standard. When maximum
portability was needed, you'd rely on this book, because compilers also relied on it.

In 1989, the ANSI released the C89 standard aka ANSI C. in 1990, the ISO adopted ANSI C with a few modifications called C90.
Compilers eventually complied with this standard and programmers followed.

In 1999, the ISO released a new version of C named C99, which included many compiler extensions and C++ features into it.

in 1979, Bjarne Stroustrup at Bell Labs developed C++ as an extension to C. It adds many features and can be thought of
as a superset of C. It notably supports object oriented programming.

C++ was standardized in 1998 by the ISO.

Five major updates to C++ were made since then, C++11 (2011) being widely considered the baseline. Those come out every three or so years.

ISO/IEC 14882:2020 is the formal name for the C++20 version released in 2020

C/C++ philosophy is TRUST THE PROGRAMMER.
It's both wonderful and dangerous. It provides freedom, but won't stop you from doing nonsensical things because it
will assume you have a reason for it that it doesnt understand.
There's a few traps new programmers fall into if not prepared.
That's why knowing what not to do is as important as knowing what to do.

C++ excels in high performance and precise memory control use cases.
Examples: Video games, Real time systems, High performance Finance, Graphical applications and simulations,
Productivity/office apps, embbed software, audio and video processing, AI and neural networks.

It also has a large number of high quality 3rd party libraries available.

C++ is far from dying even 45 years later, as the 2nd-3rd most popular compiled language, and 5th-6th most popular language.
It's one of the most popular languages to learn to code with a huge variety of resources.
With regular updates, large 3rd party libraries choice and dominance in the video game industry, it continues to thrive.

You don't need to know C to learn C++.
You can learn C fast after learning C++, C is mostly used for niche use cases like embedded devices that can only interact with
other languages that can only interface with C, for the rest, C++ is recommended.

GPT summary:
C Language:

    Developed by Dennis Ritchie in 1972 at Bell Labs for system programming and operating systems.
    Designed to be minimalistic, efficient, portable, and give programmers control over memory.
    C’s portability made it ideal for rewriting the Unix operating system, which helped boost its popularity.
    C's formal specification began with the 1978 book The C Programming Language by Ritchie and Kernighan, leading to the C89 (ANSI C) standard in 1989 and C90 standard in 1990.
    C99 introduced new features, which were later incorporated into C++.

C++ Language:

    Developed by Bjarne Stroustrup at Bell Labs starting in 1979, C++ extends C by adding object-oriented programming (OOP) features.
    C++ became standardized in 1998 by ISO, with updates in 2003 (C++03) and several major updates (C++11, C++14, C++17, C++20, and C++23), each adding new features.
    C++ is widely used for performance-critical applications like video games, real-time systems, financial applications, and embedded software.

Design Philosophy:

    Both C and C++ emphasize "trust the programmer," offering a high degree of freedom but requiring caution, as they do not prevent programmers from making potentially harmful mistakes.

C++ Today:

    C++ remains popular, especially in areas requiring high performance and resource control.
    It consistently ranks as one of the most used languages and is especially dominant in game development.
    Despite its challenges, C++ continues to evolve with regular updates and extensive third-party libraries.

Learning C++:

    It's not necessary to learn C before C++—you can start with C++ and learn C later if needed.
    C is primarily used in specialized areas, while C++ is more widely applicable in modern development.

Lesson 0.4
----------

Development process in C++:

Step 1: Define the problem to solve. 'WHAT'

examples: allow me to enter many numbers then calculate the average.
	generate a 2d maze that lets the user navigate through it, they win by getting to the end.
	reads a file of stock prices and predicts whether price will go up or down.

Step 2: Determine how you will solve the problem. 'HOW'

It's the most neglected in software development. The thing is, there are many ways to solve a problem.
Some of them though, are bad, and some good. Most of the time, programmers get an idea and immediatly start coding a solution.
It usually makes a solution that falls into the bad category.

Good solutions usually have the following characteristics:
Straightforward, not overly complicated or confusing.
Well documented, especially around any assumptions being made or limitations.
Built modularly, so parts can be reused or changed later without impacting other parts of the program.
They can recover gracefully or give useful error messages when something unexpected happens.

A bug is any kind of programming error that prevents the program from operating correctly.
The term bug was first used by Thomas Edison in the 1870s. it got popularized in 1940 when engineers found an actual moth stuck in the hardware
of an early computer, causing a short circuit. both the log book in which the error was reported and the moth are now part of the smithsonian
museum of american history.

Various studies have shown that on complex software systems, only 10-40% of a programmer's time is actually spent writing the initial
program. the rest is spent on maintenance, which consists of debugging, updates to cope with environment changes (new OS version for exemple)
enhancements (minor changes to improve usability or capability), or internal improvements (to increase reliability or maintainability).

So, it's worth spending more time up front thinking about the HOW to save yourself a lot of time down the road.

Step 3: Write the program

For that, you need to learn a programming language and a text editor.

sometext.cpp

text editors designed for coding usually have syntax highlighting and coloring, line numbering and fixed width unambiguous font.

Because source code is written using ASCII characters, some mathematical concepts that usually use characters that are not ASCII are abstracted using
different characters
like != is different than ≠ that's not ASCII.

Simple C++ programs only have one source code file but complex ones can have hundreds or thousands.
Each file will need to be saved to disk, which requires a filename. C++ doesn't have naming requirements,
but the primary source file as a standard is usually named main.cpp.

The primary may also be named after the program name ex: calculator.cpp, or use other extensions like .cc or .cxx.

Lesson 0.5
----------

Step 4: Compile your source code

We use a C++ compiler that goes through each line of your code sequentially and:
first, the compiler checks your code to make sure it follows the C++ language rules. otherwise it gives you an error
and aborts the compiling process.
second, the compiler translates your C++ code into machine language instructions. Those instructions are stored in an intermediate file
called an object file. The object file also contains metadata that is required or useful in subsequent steps.

object files are usually named name.o or name.obj where name is the name of the cpp file.
if you had 3 cpp files, the compiler would generate 3 appropriately named object files.

Step 5: Linking object files and libraries

After compiling, the linker kicks in. Its job is to combine all the object files and produce
the desired output file (like an executable file that you can run). This process is called linking.

First, the linker reads in each of the object files generated by the compiler and makes sure they are valid.
Second, the linker ensures all cross-file dependencies are resolved properly. for example, if you define
something in one cpp file, then use it in another, the linker connects the two together. If it isn't able to connect
a reference to something with its definition, you get a linker error, the the linking process will abort.
Third, the linker is also capable of linking library files.
A library file is a collection of precompiled code that has been packaged up for reuse in other programs.
C++ comes with the standard library that provides a set of useful capabilities to use in your programs.
One of the most used is the Input/Output library often called iostream which can print text on a monitor and get keyboard
inputs from a user.
Almost every C++ program uses the standard library so it gets linked very often into your programs. Most
C++ linkers are configured to link in the standard library by default.
You can also link other libraries, depending on your program's purpose, so you don't have to code basic functions by hand.

FINALLY, the linker outputs the desired output file, which is usually an executable, but could be a library file
depending on how you set up your project.

Building
Because there are multiple steps involved, the term building is often used to refer to the full process of converting
source code files into an executable that can be run, a specific executable produced as the result of building is sometimes
called a build.

For complex projects, build autmation tools such as make or build2 are often used to help automate the process of building
programs and running automated tests.

Steps 6 & 7: Testing and Debugging

This is the fun part ! You are now able to run your executable file and see what it does!
Once it can run, it can be tested. Testing is the process of assessing whether your software is working as expected.
Basic testing typically involves trying different input combinations to ensure the software behaves correctly in different
cases.

If it doesn't behave as expected, you'll have some debugging to do, which is the process of finding and fixing programming errors.

You can either install separately your editor compiler linker and debugger, or use an IDE that bundles all of those together.

GPT summary:
    Compiling Source Code:
        Compiler checks the C++ code for errors, ensuring it follows the language rules. Errors result in messages pointing to the line where the issue occurred.
        The compiler then translates the source code into machine language and stores it in an intermediate file called an object file (typically named name.o or name.obj).

    Linking Object Files and Libraries:
        After compilation, the linker combines all object files and resolves any cross-file dependencies. If a reference in one file doesn’t match a definition in another, a linker error occurs.
        The linker also links in libraries. The C++ Standard Library is commonly linked, and additional libraries (like for audio processing) can be linked as needed.

    Building:
        The entire process of compiling and linking is often referred to as "building," resulting in an executable or library file.

    Testing and Debugging:
        After building the executable, the program is tested by running it with different inputs to check its behavior. If the program doesn’t work as expected, debugging is used to find and fix errors.

    Integrated Development Environments (IDEs):
        IDEs bundle together tools for editing, compiling, linking, and debugging, making the development process more streamlined. The lesson will cover IDEs in later chapters.

In summary, compiling a C++ program involves checking for errors, translating source code into machine language, linking object files, and then building an executable. The process is followed by testing and debugging the program to ensure it works correctly.

Lesson 9
--------

to compile a cpp file, use
g++ name.cpp

To run
./a.out

to compile for debug
g++ -ggdb name.cpp

to compile for release
g++ -O2 -DNDEBUG
OR
g++ -O3 -DNDEBUG

I ADDED ALISES,
gpp
for debug
gppr
for release

Lesson 10
---------

Usually, compilers follow the C++ standard behavior, however, they often implement their own changes to the language, for better compatibility with
other versions of C for example. Those changes are called compiler extensions.

Writing a program that uses those extensions make it incompatible with the C++ standard. Those usually will not compile on a different compiler, or not run correctly.

The thing is, those extensions are usually enabled by default.
We recommend turning extensions OFF.

ADDED -pedantic-errors option to gpp and gppr aliases to turn off compiler extensions

Lesson 11
---------

If you have done something that definitely violates the rules of C++, then your program is ILL-FORMED
If the compiler encounters any issue, it will emit a diagnostic message aka diagnostic.
C++ does not define a standard for diagnostic messages. 

Modern compilers on the other hand, adopted the following:
a DIAGNOSTIC ERROR
means the compiler has decided to halt compilation because it either cannot proceed or deems the error serious enough to stop.
a DIAGNOSTIC WARNING
means the compiler has decided not to halt compilation.
The choice of categorization is usually compiler specific.

To identify the issue, a diagnostic contains filename and line number and expectation vs what was found.
Sometimes code doesnt violate C++ rules but still warns you because of your compiler.

you can disable warnings you deem useless by excluding particular lines for your compiler temporarily

Don't let warnings pile up. Resolve them as you encounter them AS IF they were errors. You might otherwise miss a warning that is really an error.
You can choose your warning levels at which your compiler will notify you. By default they only notify you on most obvious issues.

ADDED TO ALIASES
-Wall -Weffc++ -Wextra -Wconversion -Wsign-conversion
to increase warning levels.

Treat warnings as errors to enforce self discipline of fixing warnings.
ADDED -Werror TO ALIASES

Lesson 12
---------

Compilers usually pick a standard version default, it is most of the times C++14 which lacks many latest and greatest features.
Professionally, the standard choice is usually one or two versions old.
For personal projects and learning, use the latest.

Compilers usually offer preview support for features from the next standard to come out. They can be buggy.

This website currently targets the C++17 standard. It also contains 20 and 23 content if your compiler supports it.
When changing your language standard make the change to all build configurations.

ADDED
-std=C++23
to ALIASES

The C++ standards document is designed for compiler writers to implement new standards accurately. It is not free.
You may find draft standards that are close enough to the official release here for free:
https://www.open-std.org/jtc1/sc22/wg21/docs/standards

The CPPReference website tracks compiler support for each feature per language standard.
https://en.cppreference.com/w/cpp/compiler_support/23

Lesson 13
---------

What language standard is my compiler using?

