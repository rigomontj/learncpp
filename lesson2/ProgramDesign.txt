The most important thing to remember is to design your program BEFORE you
start coding.
A little up-front planning will save you both time and frustration in the
long run.

-------------------------------
DESIGN STEP 1: Define your goal
-------------------------------

In order to write a succesful program, you first need to define what your
goal is.
Ideally, you should be able to state this in a sentence or two.
It is often useful to express this as a tangible outcome for the user.

Examples:
	Allow the user to organize a list of names and associated phone numbers.
	Generate randomized dungeons that will produce interesting looking
		caverns.
	Generate a list of stock recommandations for stocks that have high
		dividends.
	Model how long it takes for a ball dropped off a tower to hit the ground
	Generate the longest waiting line design from an area. 

Although this step seems obvious, it's also highly important - the worst
thing you can do is write a program that doesn't actually do what you
or your client wanted.

----------------------------------
DESIGN STEP 2: Define requirements
----------------------------------

While defining your problem helps you determine what outcome you want,
it's still vague. The next step is to think about requirements.

Requirements means the constraints that your solutions must follow
(budget, timeline, space, memory etc...)
and the capabilities the program must have.
This part should be focused on the WHAT, not the HOW.

Example:
	Phone numbers should be saved, so they can be recalled later.
	The randomized dungeon should always contain a way to get from the
	entrance to an exit
	The stock recommendations should leverage historical pricing data
	The user should be able to enter the height of the tower
	We need a testable version within 4 days
	The program should produce results within 10 seconds of submitting
		their request.
	The program should crash in less than 0.1% of user sessions.
	The waiting line should have a user defined start and end.

A single problem may yield many requirements, and the solution isn't done
until it satisfies all of them.

----------------------------------------------------------
DESIGN STEP 3: Define your tools, targets, and backup plan 
----------------------------------------------------------

When you are an experienced programmer, there are many other steps
that typically would take place at this point, including:
	Defining what target architecture and/or OS your program will run on
	Determining what sets of tools you will be using
	Determining whether you will write your program alone or as a team
	Defining your testing/feedback/release strategy
	Determining how you will back up your code

However, as a new programmer, the answers to these questions are typically
simple: You are writing a program for your own use, alone, on your system,
using your text editor, and your code is probably not used by anybody else.

That said, if you are going to work on anything of non-trivial complexity,
you should have a plan to backup your code. It's not enough to just zip or
copy the directory to another location on your machine. You can use github.

----------------------------------------------------------
DESIGN STEP 4: Break hard problems down into easy problems
----------------------------------------------------------

In real life, we often need to perform tasks that are very complex.
Trying to figure out how to do these tasks can be very challenging.
In such cases, we often make use of the top down method of problem solving,
that is instead of solving a single complex task, we break that task into
multiple subtasks, each of which is individually easier to solve.
If those subtasks are still too difficult to solve, the can be broken down
further. By continuously splitting complex tasks into simpler ones, you can
eventually get to a point where each individual task is manageable, if not
trivial.

Examle: Cleaning the house
	Vacuum the carpets
	Clean the bathrooms
		Scrub the toilet
		Wash the sink
	Clean the kitchen
		Clear the countertops
		Clean the countertops
		Scrub the sink
		Take out the trash

Now, we have a hierarchy of tasks, none of them particularly hard.
By completing each of these relatively manageable sub-items, we can
complete the more difficult overall task of cleaning the house.

The other way to create a hierarchy of tasks is to do so from the bottom up
In this method, we start from a list of easy tasks and construct the
hierarchy by grouping them.

As an example, many people have to go to work on weekdays, so let's say we
want to solve the problem of "go to work"
If you were asked what tasks you did in the morning to get from bed to work
you might come up with the following list:
	Pick out clothes
	Get dressed
	Eat breakfast
	Travel to work
	Brush your teeth
	Get out of bed
	Prepare breakfast
	Get on your bicycle
	Take a shower

By using the bottom up method, we can organize these into a hierarchy of
items by looking for ways to group items with similarities together.

Get from bed to work
	Bedroom things
		Turn off alarm
		Get out of bed
		Pick out clothes
	Bathroom things
		Take a shower
		Get dressed
		Brush your teeth
	Breakfast things
		Make coffee or tea
		Eat cereal
	Transportation things
		Get on bicycle
		Travel to work

As it turns out, these task hierarchies are extremely useful in programming
because once you have a task hierarchy you have essentially defined the
structure of your overall program. The top level task in this case Clean
the house or Go to work becomes main() because it is the main problem
you are trying to solve. The subitems become functions in the program.

If one of the items (functions) is too hard to implement, simply split
that item into multiple sub-items/sub-functions.
Eventually you should a point where each function in your program is
trivial to implement.

------------------------------------------------
DESIGN STEP 5: Figure out the sequence of events
------------------------------------------------

Now that your program has a structure, it's time to determine how to link
all of the tasks together.
The first step is to determine the sequence of events that will be performed
For example, when you get up in the morning, what order do you do the 
above tasks? It might look like this:

Bedroom things
Bathroom things
Breakfast things
Transportation things

If you were writing a calculator:

Get first number from user
Get mathematical operation from user
Get second number from user
Calculate result
Print result

At this point, we're ready for implementation.

---------------------------------------------------
IMPLEMENTATION STEP 1: Outlining your main function
---------------------------------------------------

The above sequences can be used to outline your main program, don't worry
about inputs and outputs for the time being.

int main()
{
//	doBedroomThings();
//	doBathroomThings();
//	doBreakfastThings();
//	doTransportationThings();
	
	return EXIT_SUCCESS;
}

For the calculator:

int main()
{
	// Get first number from user	
//	 getUserInput();

	// Get mathematical operation from user 
//	 getMathetmaticalOperation();

	// Get second number from user	
//	 getUserInput();

	// Calculate result 
//	 calculateResult();

	// Print result 
//	 printResult();

	return EXIT_SUCCESS;
}

Note that if you're going to use this outline method for constructing your
programs, your functions won't compile because the definitions don't exist
yet. Commenting the functions calls out until you're ready to implement
the function definitions is one way to address this and the way we'll show
here.
Alternatively, you can stub out your functions (create placeholder functions
with empty bodies so your program will compile.

----------------------------------------------
IMPLEMENTATION STEP 2: Implement each function 
----------------------------------------------

In this step, for each function, you'll do three things:
	Define the function prototype (inputs and outputs)
	Write the function
	Test the function

If your functions are granular enough, each function should be fairly
simple and straightforward. If a given function still seems over-complex
to implement, perhaps it needs to be broken down into subfonctions,
or you need to revisit your sequencing of events.

// Full implementation of the getUserInput function
int getUserInput()
{
	std::cout << "Enter an integer: ";
	int input {};
	std::cin >> input;	

	return input;
}

int main()
{
	// Get first number from user	
	int value { getUserInput() };
	std::cout << value << "\n";

	// Get mathematical operation from user 
//	 getMathetmaticalOperation();

	// Get second number from user	
//	 getUserInput();

	// Calculate result 
//	 calculateResult();

	// Print result 
//	 printResult();

	return EXIT_SUCCESS;
}

First, we've determined that the getUserInput function takes no arguments
and will return an int value back to the caller. That gets reflected
in the function prototype having a return value of int and no parameters.
Next, we've written the body of the function, which is a straightforward
4 statements. Finally, we've implemented some temporary code in function
main to test that function getUserInput (including its return value) is 
working correctly

We can run this program many times with different input value and make sure
that the program is behaving as we expect at this point.
If we find something that doesn't work, we know the problem is in the code
we've just written.

Once we're convinced the program is working as inteded up to this point,
we can remove the temporary testing code, and proceed to implementation
of the next function.
Remember: DON'T implement your entire program in one go, work on it in steps
testing each step along the way before proceeding.

------------------------------------
IMPLEMENTATION STEP 3: Final testing
------------------------------------

Once your program is finished, the last step is to test the whole program
and ensure it works as intended. If it doesn't work, fix it.

---------------
WORDS OF ADVICE
---------------

Keep your programs simple to start
	Often, new programmers have a grand vision for all the things they
	want their program to do. If you try to write something too complex
	to start, you will become overwhelmed and discouraged at your lack of
	progress. Instead, make your first goal as simple as possible,
	something that is definitely within your reach.
	For example:"I want to be able to display a 2-dimensional field
	on the screen"
Add features over time
	Once you have your simple program working and working well, then
	you can add features to it. For example, once you can display your
	field, add a characters who can walk around. Once you can walk around,
	add walls that can impede your progress. Once you have walls,
	build a simple town out of those. Once you have a town, add merchants.
	By adding each feature incrementally your program will get progressively
	more complex without overwhelming you in the process.
Focus on one area at a time
	Don't try to code everything at once, and don't divide your attention
	across multiple tasks. Focus on one task at a time. It is much better
	to have one working task and five that haven't been started yet than
	six partially working tasks. If you split your attention, you are more
	likely to make mistakes and forget important details.
Test each piece of code as you go
	New programmers will often write the entire program in one pass.
	Then they compile it for the first time, the compiler reports hundreds
	of errors. This can not only be intimidating, if your code doesn't
	work, it may be hard to figure out why. Instead, write a piece of code,
	compile and test it immediately. If it doesn't work, you'll know exactly
	where the problem is, and it will be easy to fix. Once you are sure
	that the code works, move to the next piece and repeat.
	It may take longer to finish writing your code, but when you are done,
	the whole thing should work and you won't have to spend twice as long 
	trying to figure out why it doesn't.
Don't invest in perfecting early code
	The first draft of a feature or program is rarely good. Furthermore,
	programs tend to evolve over time, as you add capabilities and find
	better ways to structure things. if you invest too early in polishing
	your code (adding documentation, full compliance with best practices,
	making optimizations), you risk losing all of that investment when 
	a code change is necessary. Instead, get your features minimally
	working and then move on. As you gain confidence in your solutions,
	apply successive layers of polish. Don't aim for perfect -- non-trivial
	programs are never perfect, and there's always something more that
	could be done to improve them, get to good enough and move on.
Optimize for maintainability, not performance
	These is a famous quote by Donald Knuth that says
	"premature optimization is the root of all evil". New programmers
	often spend far too much time thinking about how to micro-optimize their
	code (figuring out which of 2 statements is faster). This rarely matters
	Most performance benefits come from good program structure, using the 
	right tools and capabilities for the problem at hand and following best
	practices.
	Additional time should be used to improve the maintainability of your
	code. Find rendundancy and remove it, split up long functions into
	shorter ones. Replace awkward or hard to use code with something
	better. The end result will be code that is easier to improve and
	optimize later after you've determined where optimization is actually
	needed, and fewer bugs.

"A complex system that works is invariably found to have evolved from a 
simple system that worked."
	-John Gall

-----------
CONCLUSION:
-----------

Many new programmers shortcut the design process because it seems like a 
lot of work and/or it's not as much fun as writing the code.
However, for non trivial projects following these steps will save you a lot
of time in the long run. A little planning up front saves a lot of
debugging at the end.

SO:
	Spending a little time upfront thinking about how to structure your
	program will lead to better code and less time spent finding and
	fixing errors.

"I would say this is arguably the most important thing in programming
and some of us, like me at first, took it for granted."

